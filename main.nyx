import "io.nyx", "elf.nyx", "dns.nyx";

let elf_verify_magic :: u8(ELF64_FileHeader* fh) {
	for usz i..fh.magic.count {
		if fh.magic[i] != ELFMAGIC[i] {
			return 0;
		}
	}
	return 1;
}

let elf_getsh :: ELF64_SectHeader*(ELF64_FileHeader* fh, usz i) {
	return ELF64_SectHeader*:(usz:fh + fh.sh_offs + fh.sh_size * i);
}

let elf_getph :: ELF64_ProgHeader*(ELF64_FileHeader* fh, usz i) {
	return ELF64_ProgHeader*:(usz:fh + fh.ph_offs + fh.ph_size * i);
}

let dlopen :: ELF64_FileHeader*(u8[] libname) {
	isz fd;
	if &fd->file_openr(libname) {
		print("Failed to open file\n");
		return null;
	}

	stat_t st;
	fd->fstat(&st);

	u8* elf_data = malloc(st.st_size);
	fd->read(elf_data[0..st.st_size]);
	fd->close();

	let fh = ELF64_FileHeader*:elf_data;
	if !elf_verify_magic(fh) {
		print("ELF magic invalid\n");
		return null;
	}

	ELF64_SectHeader* strtab = elf_getsh(fh, fh.strtab_index);
	u8* strtab_start = elf_data + strtab.offs;

	u8[] interp = null[0..0];
	ELF64_Dyn* dyn = null;

	for usz i..fh.ph_count {
		let ph = elf_getph(fh, i);

		if ph.type == ELFPH_INTERP {
			interp = (elf_data + ph.offs)[0..ph.mem_size];
		}
		if ph.type == ELFPH_DYNAMIC {
			dyn = ELF64_Dyn*:elf_data + ph.offs;
		}

		print("PH ");
		print_i64(ph.type);
		print(" 0x");
		print_h64(ph.offs);
		print("\n");
	}

	u8* dynstr = null;

	while dyn && dyn.type != ELFDYN_NULL {
		if dyn.type == ELFDYN_STRTAB {
			dynstr = elf_data + dyn.val;
		}

		print("DYN ");
		print_i64(dyn.type);
		print(" 0x");
		print_h64(dyn.val);
		print("\n");
		dyn += sizeof(ELF64_Dyn);
	}

	ELF64_Sym[] dynsym = null[0..0];

	for usz i..fh.sh_count {
		let sh = elf_getsh(fh, i);
		u8* strtab_name = strtab_start + sh.name;
		u8[] name = strtab_name[0..cstrlen(strtab_name)];

		if sh.type == ELFSH_DYNSYM {
			dynsym = (ELF64_Sym*:elf_data + sh.offs)[0..sh.size/sizeof(ELF64_Sym)];
		}

		print("SH '");
		print(name);
		print("' offs:0x");
		print_h64(sh.offs);
		print(" type:");
		print_i64(sh.type);
		print("\n");
	}

	for usz i..dynsym.count {
		u8* strtab_name = dynstr + dynsym[i].name;
		u8[] name = strtab_name[0..cstrlen(strtab_name)];

		print("SYM ");
		print_i64(i);
		print(" '");
		print(name);
		print("'\n");
	}

	return fh;
}

let hton16 :: u16(u16 v) {
	return (v >> 8u) | ((v & 0xFF) << 8u);
}

let hton32 :: u32(u32 v) {
	return	((v & 0x000000FF) << 24u) |
			((v & 0x0000FF00) << 8u) |
			((v & 0x00FF0000) >> 8u) |
			((v & 0xFF000000) >> 24u);
}

// let hton64 :: u64(u64 v) {
// 	return	((v & 0x00000000000000FF) << 56u) |
// 			((v & 0x000000000000FF00) << 40u) |
// 			((v & 0x0000000000FF0000) << 24u) |
// 			((v & 0x00000000FF000000) << 8u) |
// 			((v & 0x000000FF00000000) >> 8u) |
// 			((v & 0x0000FF0000000000) >> 24u) |
// 			((v & 0x00FF000000000000) >> 40u) |
// 			((v & 0xFF00000000000000) >> 56u);
// }

let ipv4_parse_addr :: u8(u8[] str, sockaddr_in_t* out) {
	u8[][5] nums;
	usz j = 0;

	u8* num_start = str.data;
	for usz i..str.count {
		u8 c = str[i];
		if c == '.' {
			if j >= 3u {
				return 1;
			}
			nums[j++] = num_start[0..usz:(i - (num_start - str.data))];
			num_start = str.data + i + 1;
		}
		if c == ':' {
			if j != 3u {
				return 1;
			}
			nums[j++] = num_start[0..usz:(i - (num_start - str.data))];
			num_start = str.data + i + 1;
		}
	}
	if j < 3u {
		return 1;
	}
	nums[j] = num_start[0..usz:(str.count - (num_start - str.data))];

	u32 addr = 0;
	for usz i..4 {
		u64 v;
		if stou(nums[i], &v) || v > 0xFF {
			return 1;
		}
		addr |= v << i * 8;
	}

	if j == 4u {
		u64 v;
		if stou(nums[4], &v) || v > 0xFFFF {
			return 1;
		}
		out.sin_port = hton16(v);
	}

	out.sin_addr = addr;
	return 0;
}

let recv :: isz(isz sock, void[] buf) {
	void* it = buf.data, end = it + buf.count;
	while it < end {
		isz res = sock->read(it[0..usz:(end - it)]);
		if res <= 0 {
			return res;
		}

		it += res;
	}
	return buf.count;
}

let dns_encode_name :: isz(u8[] domain, u8[] out) {
	u8* q_it = out.data, q_max = q_it + out.count;
	u8* substr = domain.data;
	for usz i..domain.count {
		if domain[i] == '.' {
			usz substr_len = i - usz:(substr - domain.data);
			u8* q_it_next = q_it + substr_len + 1;
			if !substr_len || substr_len > 63u || q_it_next >= q_max {
				return -1;
			}
			*q_it++ = substr_len;
			for usz j..substr_len {
				*q_it++ = substr[j];
			}

			q_it = q_it_next;
			substr = domain.data + i + 1;
		}
	}

	usz substr_len = domain.count - usz:(substr - domain.data);
	u8* q_it_next = q_it + substr_len + 2;
	if !substr_len || substr_len > 63u || q_it_next >= q_max {
		return -1;
	}
	*q_it++ = substr_len;
	for usz j..substr_len {
		*q_it++ = substr[j];
	}

	*q_it++ = 0;
	return usz:(q_it - out.data);
}

let ipv4_dnslookup :: u8(u8[] dns_host, u8[] domain, sockaddr_in_t* out) {
	sockaddr_in_t saddr;
	mset8(&saddr, 0, sizeof(sockaddr_in_t));
	saddr.sin_family = AF_INET;
	saddr.sin_port = hton16(53);

	if ipv4_parse_addr(dns_host, &saddr) {
		return 1;
	}

	isz sock = socket(AF_INET, SOCK_STREAM, 0);
	if sock < 0 {
		return 1;
	}

	if sock->connect(void*:&saddr, sizeof(sockaddr_in_t)) < 0 {
		sock->close();
		return 1;
	}

	DNS_Header dh;
	mset8(&dh, 0, sizeof(DNS_Header));
	dh.flags = hton16(DNSH_QUERY | DNSH_STANDARD | DNSH_RD);
	dh.qdcount = hton16(1);

	DNS_Question dq;
	dq.qtype = hton16(DNST_A);
	dq.qclass = hton16(DNSC_IN);

	u8[256] question;
	isz qlen = dns_encode_name(domain, question);
	if qlen < 0 {
		sock->close();
		return 1;
	}

	u16 msglen = hton16(qlen + sizeof(DNS_Question) + sizeof(DNS_Header));
	sock->write((&msglen)[0..1]);
	sock->write((&dh)[0..1]);
	sock->write(question[0..qlen]);
	sock->write((&dq)[0..1]);

	// Receive message length
	if sock->recv((&msglen)[0..1]) <= 0 {
		sock->close();
		return 1;
	}
	msglen = hton16(msglen);

	// Receive message body
	u8[4096] buf;
	if sock->recv(buf[0..msglen]) <= 0 || msglen < u32:sizeof(DNS_Header) {
		sock->close();
		return 1;
	}

	sock->close();

	DNS_Header* rh = void*:buf.data;
	rh.flags = hton16(rh.flags);
	rh.qdcount = hton16(rh.qdcount);
	rh.ancount = hton16(rh.ancount);
	rh.nscount = hton16(rh.nscount);
	rh.arcount = hton16(rh.arcount);

	u16 rcode = rh.flags & DNSH_RCODE_MASK;
	if rcode != DNSH_NO_ERROR {
		return 1;
	}

	void* section_start = buf.data + sizeof(DNS_Header);
	u8* it = section_start;

	for usz i..rh.qdcount {
		while *it { it++; } // QNAME
		it += sizeof(DNS_Question);
	}

	for usz i..rh.ancount {
		while *it { it++; } // NAME
		let rr = DNS_RsrcRecord*:it;
		rr.type = hton16(rr.type);
		rr.class = hton16(rr.class);
		rr.ttl = hton16(rr.ttl);
		rr.rdlen = hton16(rr.rdlen);

		it += sizeof(DNS_RsrcRecord);

		if rr.type == DNST_A && rr.class == DNSC_IN {
			out.sin_addr = *u32*:it;
			return 0;
		}

		it += rr.rdlen; // RDATA
	}

	return 1;
}

let main :: u64() {
// 	u8[] libname = "/usr/lib/libxcb.so";

// 	void* lib = dlopen(libname);
// 	if !lib {
// 		print("failed to load library\n");
// 	}

	if 1 {
		
	}

	isz sock = socket(AF_INET, SOCK_STREAM, 0);
	if sock < 0 {
		print("socket creation failed\n");
	}

	sockaddr_in_t saddr;
	mset8(&saddr, 0, sizeof(sockaddr_in_t));
	saddr.sin_family = AF_INET;
	saddr.sin_port = hton16(80);

	if ipv4_dnslookup("9.9.9.9", "lutfisk.net", &saddr) {
		print("failed to resolve host\n");
	}

	if connect(sock, void*:&saddr, sizeof(sockaddr_in_t)) < 0 {
		print("connection failed\n");
	}

	write(sock, "GET / HTTP/1.1\r\nHost: lutfisk.net\r\nAccept: */*\r\nUpgrade-Insecure-Requests: 0\r\nConnection: close\r\n\r\n");

	u8[512] buf;
	isz bytes;
	while bytes = read(sock, buf) {
		print(buf[0..bytes]);
	}

	exit(0);
}

