import "std/io.nyx", "std/mem.nyx", "std/dynlib.nyx";

def TK :: enum u32 {
	EOF,
	IDENT,
	STR, CHAR,
	INT, FLOAT,

	DOT, DDOT,
	COLON, DCOLON,
	PLUS, DPLUS, PLUSEQ,
	MINUS, DMINUS, MINUSEQ, MINUSGREATER,
	ASTERISK, ASTERISKEQ,
	SLASH, SLASHEQ,
	CARET, DCARET, CARETEQ,
	AMPERSAND, DAMPERSAND, AMPERSANDEQ,
	PIPE, DPIPE, PIPEEQ,
	EQUAL, DEQUAL,
	LESSER, DLESSER, LESSEREQ, DLESSEREQ,
	GREATER, DGREATER, GREATEREQ, DGREATEREQ,

	LPAREN, RPAREN,
	LBRACKET, RBRACKET,
	LBRACE, RBRACE,

	KW_BREAK, KW_CONTINUE,
	KW_FOR, KW_WHILE,
	KW_SWITCH, KW_CASE,
	KW_IF, KW_ELIF, KW_ELSE,
	KW_LET,
	KW_DEF, KW_STRUCT, KW_ENUM, KW_EXPLICIT, KW_IMPLICIT,
	KW_RETURN,
	KW_IMPORT, KW_INCLUDE,
	KW_SIZEOF, KW_ALIGNOF,
	KW_NULL,

	KW_SYSCALL,
};

def Token :: struct {
	u32 type;
	u32 file;
	u8[] str;
}

let tokenize :: Token[](u8[] data) {

}

let main :: u64() {
	dlopen_p = dlopen;
	Arena* arena = amcreate(64M);

	u8 i = 5;

	switch i
	case 0, 1, 2 {
		print("Case 1 - ");
		print_i64(i);
		print("\n");
	},
	case 3, 4 {
		print("Case 2 - ");
		print_i64(i);
		print("\n");
	},
	default {
		print("Unhandled case\n");
	};

	u8[] in_path = "main.nyx";

	isz in_f;
	if fopenr(&in_f, in_path) {
		print("Failed to open '");
		print(in_path);
		print("'\n");
		goto err0;
	}

	stat_t st;
	if fstat(in_f, &st) < 0 {
		print("fstat() failed\n");
		goto err1;
	}

	u8* in_data = amalloc(arena, st.st_size + 2);
	in_data[0] = 0;
	in_data[st.st_size] = 0;
	u8[] invw = (in_data + 1)[0..st.st_size];
	if fread(in_f, invw) != st.st_size {
		print("read() failed\n");
		goto err1;
	}
	fclose(in_f);

// 	print(invw);
	Token[] tks = tokenize(invw);

	amdestroy(arena);
	exit(0);

err1:	fclose(in_f);
err0:	amdestroy(arena);
		exit(1);
}

