// https://refspecs.linuxfoundation.org/elf/

// ----- File Header

u8	ELFCLASS_32	:: 1,
	ELFCLASS_64	:: 2;

u8	ELFABI_SYSV	:: 0,
	ELFABI_GNU	:: 3;

u8	ELFENC_LSB	:: 1,
	ELFENC_MSB	:: 2;

u16	ELFOBJ_REL	:: 1,
	ELFOBJ_EXEC	:: 2,
	ELFOBJ_DYN	:: 3,
	ELFOBJ_CORE	:: 4;

u16	ELFARCH_I386	:: 3,
	ELFARCH_AMD64	:: 62;

u8[4] ELFMAGIC :: { 0x7F, 'E', 'L', 'F' };

def ELF64_FileHeader :: struct {
	u8[4] magic;
	u8 class;
	u8 enc;
	u8 header_ver;
	u8 osabi;
	u8 osabi_ver;
	u8[7] pad;

	u16 objtype;
	u16 arch;
	u32 ver;

	u64 entry;
	u64 ph_offs;
	u64 sh_offs;
	u32 cpuflags;

	u16 fh_size;
	u16 ph_size;
	u16 ph_count;
	u16 sh_size;
	u16 sh_count;

	u16 strtab_index;
}

// ----- Program Header

u32	ELFPH_NULL		:: 0,	// Unused segment
	ELFPH_LOAD		:: 1,	// Loadable segment
	ELFPH_DYNAMIC	:: 2,	// Dynamic linking info
	ELFPH_INTERP	:: 3,	// Interpreter name
	ELFPH_NOTE		:: 4,	// Auxiliary info
	ELFPH_SHLIB		:: 5,	// Reserved
	ELFPH_PHDR		:: 6,	// Entry for header table
	ELFPH_TLS		:: 7;	// Thread-local storage segment

u32	ELFPH_X :: 1,
	ELFPH_W :: 2,
	ELFPH_R :: 4;

def ELF64_ProgHeader :: struct {
	u32 type;
	u32 flags;

	u64 offs;
	u64 vaddr;
	u64 paddr;
	u64 file_size;
	u64 mem_size;
	u64 align;
}

// ----- Section Header

u32	ELFSH_NULL			:: 0,	// Unused section
	ELFSH_PROGBITS		:: 1,	// Program data
	ELFSH_SYMTAB		:: 2,	// Symbol table
	ELFSH_STRTAB		:: 3,	// String table
	ELFSH_RELA			:: 4,	// 'RelAdd' table
	ELFSH_HASH			:: 5,	// Symbol hash table
	ELFSH_DYNAMIC		:: 6,	// Dynamic linking info
	ELFSH_NOTE			:: 7,	// Notes
	ELFSH_NOBITS		:: 8,	// Zero-initialized program data
	ELFSH_REL			:: 9,	// 'Rel' table
	ELFSH_SHLIB			:: 10,	// Reserved
	ELFSH_DYNSYM		:: 11,	// Dynamic linker symbol table
	ELFSH_INIT_ARRAY	:: 14,	// Constructor array
	ELFSH_FINIT_ARRAY	:: 15,	// Destructor array
	ELFSH_PREINIT_ARRAY	:: 16,	// Pre-constructor array
	ELFSH_GROUP			:: 17,	// Section group
	ELFSH_SYMTAB_SHNDX	:: 18;	// Extended section indices

// Special section indices
u16 ELFSH_UNDEF		:: 0,		// Undefined section
	ELFSH_ABS		:: 0xFFF1,	// Symbol is absolute
	ELFSH_COMMON	:: 0xFFF2,	// Symbol labels an unallocated common block
	ELFSH_XINDEX	:: 0xFFFF;	// Index is extra table

def ELF64_SectHeader :: struct {
	u32 name;
	u32 type;
	u64 flags;

	u64 addr;
	u64 offs;
	u64 size;

	u32 link;
	u32 info;

	u64 addr_align;
	u64 ent_size;
}

// ----- Relocation Table

u64	ELFREL_X64_NONE		:: 0,	// No relocation
	ELFREL_X64_64		:: 1,	// Direct 64-bit
	ELFREL_X64_PC32		:: 2,	// Sign-extended PC relative 32-bit
	ELFREL_X64_GOT32	:: 3,	// 32-bit GOT entry
	ELFREL_X64_PLT32	:: 4,	// 32-bit PLT address
	ELFREL_X64_COPY		:: 5,	// Runtime symbol copy
	ELFREL_X64_GLOB_DAT	:: 6,	// Create GOT entry
	ELFREL_X64_JMP_SLOT	:: 7,	// Create PLT entry
	ELFREL_X64_RELATIVE	:: 8,	// 64-bit adjust by program base
	ELFREL_X64_GOTPCREL	:: 9,	// 32-bit signed PC relative offset to GOT
	ELFREL_X64_32		:: 10,	// Zero-extended direct 32-bit
	ELFREL_X64_32S		:: 11,	// Sign-extended direct 32-bit
	ELFREL_X64_16		:: 12,	// Zero-extended direct 16-bit
	ELFREL_X64_PC16		:: 13,	// Sign-extended PC relative 16-bit
	ELFREL_X64_8		:: 14,	// Zero-extended direct 8-bit
	ELFREL_X64_PC8		:: 15,	// Sign-extended PC relative 8-bit

	ELFREL64_TYPE_MASK	:: 0x00000000FFFFFFFF,
	ELFREL64_SYM_MASK	:: 0xFFFFFFFF00000000,
	ELFREL64_SYM_SHIFT	:: 32;

// Located in ELFSH_REL
def ELF64_Rel :: struct {
	u64 offs;
	u64 info;
}

// Located in ELFSH_RELA
def ELF64_RelAdd :: struct {
	u64 offs;
	u64 info;
	i64 addend;
}

// ----- Dynamic Linking Information

i64 ELFDYN_NULL			:: 0,	// Marks end of dynamic section
	ELFDYN_NEEDED		:: 1,	// Name of needed shared object
	ELFDYN_PLTRELSZ		:: 2,	// Size of PLT relocs
	ELFDYN_PLTGOT		:: 3,	// CPU defined value
	ELFDYN_HASH			:: 4,	// Offset of symbol hash table
	ELFDYN_STRTAB		:: 5,	// Offset of string table
	ELFDYN_SYMTAB		:: 6,	// Offset of symbol table
	ELFDYN_RELA			:: 7,	// Offset of 'RelAdd' relocs
	ELFDYN_RELASZ		:: 8,	// Total size of 'RelAdd' relocs
	ELFDYN_RELAENT		:: 9,	// Size of one 'RelAdd' reloc
	ELFDYN_STRSZ		:: 10,	// Size of string table
	ELFDYN_SYMENT		:: 11,	// Size of one symbol table entry
	ELFDYN_INIT			:: 12,	// Offset of init function
	ELFDYN_FINI			:: 13,	// Offset of termination function
	ELFDYN_SONAME		:: 14,	// Name of shared object
	ELFDYN_RPATH		:: 15,	// Library search path (deprecated)
	ELFDYN_SYMBOLIC		:: 16,	// Symbol search offset
	ELFDYN_REL			:: 17,	// Address of 'Rel' relocs
	ELFDYN_RELSZ		:: 18,	// Total size of 'Rel' relocs
	ELFDYN_RELENT		:: 19,	// Size of one 'Rel' reloc
	ELFDYN_PLTREL		:: 20,	// PLT reloc type
	ELFDYN_DEBUG		:: 21,	// Unspecified
	ELFDYN_TEXTREL		:: 22,	// Reloc can modify .text
	ELFDYN_JMPREL		:: 23,	// Offset of PLT relocs
	ELFDYN_BIND_NOW		:: 24,	// Process relocations of object
	ELFDYN_INIT_ARRAY	:: 25,	// Array of init function offsets
	ELFDYN_FINI_ARRAY	:: 26,	// Array of termination function offsets
	ELFDYN_INIT_ARRAYSZ	:: 27,	// Size of ELFDYN_INIT_ARR
	ELFDYN_FINI_ARRAYSZ	:: 28,	// Size of ELFDYN_FINI_ARR
	ELFDYN_RUNPATH		:: 29,	// Library search path
	ELFDYN_FLAGS		:: 30;	// Flags for loaded object

def ELF64_Dyn :: struct {
	i64 type;
	u64 val;
}

// ----- Symbol Table

// Binding
u8	ELFSYM_LOCAL	:: 0x00,
	ELFSYM_GLOBAL	:: 0x10,
	ELFSYM_WEAK		:: 0x20;

// Type
u8	ELFSYM_NOTYPE	:: 0,
	ELFSYM_OBJECT	:: 1,	// Data object
	ELFSYM_FUNC		:: 2,	// Function or executable code
	ELFSYM_SECTION	:: 3,	// Section
	ELFSYM_FILE		:: 4,	// Symbol name is the name of a source file
	ELFSYM_COMMON	:: 5,	// Uninitialized common block
	ELFSYM_TLS		:: 6;	// Thread-Local-Storage

u8	ELFSYM_BIND_MASK	:: 0xF0,
	ELFSYM_TYPE_MASK	:: 0x0F;

// Visibility ('other' field)
u8	ELFSYM_DEFAULT		:: 0,	// Use binding type
	ELFSYM_INTERNAL		:: 1,	// Local
	ELFSYM_HIDDEN		:: 2,	// Local
	ELFSYM_PROTECTED	:: 3;	// Prioritize over all external definitions

def ELF64_Sym :: struct {
	u32 name;
	u8 info;
	u8 other;
	u16 sh_index;
	u64 val;
	u64 size;
}

