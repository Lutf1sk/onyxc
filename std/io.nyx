import "std/unix.nyx", "std/str.nyx";

filename_from_path :: u8[](u8[] path) {
	if !path.count {
		return null[0..0];
	}

	i := path.count - 1;
	while i && path[i] != '/' {
		i--;
	}
	if i {
		++i;
	}
	return (path.data + i)[0..path.count - i];
};

fopenw :: u8(isz* fdp, u8[] path) {
	path_nt : u8[PATH_MAX];
	cstr(path, path_nt);
	*fdp = open(path_nt.data, O_WRONLY|O_TRUNC|O_CREAT, S_IRUSR|S_IWUSR);
	return *fdp < 0;
};

fopenr :: u8(isz* fdp, u8[] path) {
	path_nt : u8[PATH_MAX];
	cstr(path, path_nt);
	*fdp = open(path_nt.data, O_RDONLY, 0);
	return *fdp < 0;
};

fclose :: void(isz fd) {
	close(fd);
};

fwrite :: void(isz fd, u8[] data) {
	write(fd, data);
};

fread :: usz(isz fd, u8[] data) {
	return read(fd, data);
};

print :: isz(u8[] str) {
	return write(1, str);
};

print_i64 :: usz(i64 n) {
	if (n < 0) {
		print("-");
		n = -n;
	}

	str : u8[32];
	end := str.data + str.count;
	it := end - 1;

	while n >= 10 {
		*it-- = n % 10 + '0';
		n /= 10;
	}
	*it = n + '0';

	view := it[0..usz:(end - it)];
	print(view);
	return view.count;
};

print_h64 :: usz(u64 n) {
	hex_conv_tab : u8[16] : "0123456789ABCDEF";

	str : u8[16];
	end := str.data + str.count;
	it := end - 1;

	while n > 0x0F {
		*it-- = hex_conv_tab[n & 0x0F];
		n >>= 4u;
	}
	*it = hex_conv_tab[n];

	view := it[0..usz:(end - it)];
	print(view);
	return view.count;
};

