import "std/unix.nyx", "std/str.nyx";

filename_from_path :: u8[](path u8[]) {
	if !path.count {
		return null[0..0];
	}

	i := path.count - 1;
	while i && path[i] != '/' {
		i--;
	}
	if i {
		++i;
	}
	return path[i..path.count];
};

fopenw :: u8(fdp isz*, path u8[]) {
	path_nt : u8[PATH_MAX];
	cstr(path, path_nt);
	*fdp = open(path_nt.data, O_WRONLY|O_TRUNC|O_CREAT, S_IRUSR|S_IWUSR);
	return *fdp < 0;
};

fopenr :: u8(fdp isz*, path u8[]) {
	path_nt : u8[PATH_MAX];
	cstr(path, path_nt);
	*fdp = open(path_nt.data, O_RDONLY, 0);
	return *fdp < 0;
};

fclose :: void(fd isz) {
	close(fd);
};

fwrite :: isz(fd isz, data u8[]) {
	write(fd, data);
};

fread :: isz(fd isz, data u8[]) {
	return read(fd, data);
};

fremain :: isz(fd isz) {
	start_offs := lseek(fd, 0, SEEK.CUR);
	if start_offs < 0 {
		return -1;
	}

	end_offs := lseek(fd, 0, SEEK.END);
	if end_offs < 0 {
		return -1;
	}

	lseek(fd, start_offs, SEEK.SET);
	return end_offs - start_offs;
};

print :: isz(str u8[]) {
	return write(1, str);
};

print_i64 :: usz(n i64) {
	if (n < 0) {
		print("-");
		n = -n;
	}

	str : u8[32];
	i := str.count - 1;
	while n >= 10 {
		str[i--] = n % 10 + '0';
		n /= 10;
	}
	str[i] = n + '0';

	view := str[i..str.count];
	print(view);
	return view.count;
};

print_h64 :: usz(n u64) {
	hex_conv_tab : u8[16] : "0123456789ABCDEF";

	str : u8[16];
	i := str.count - 1;

	while n > 0x0F {
		str[i--] = hex_conv_tab[n & 0x0F];
		n >>= 4u;
	}
	str[i] = hex_conv_tab[n];

	view := str[i..str.count];
	print(view);
	return view.count;
};

