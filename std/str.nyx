
cstr :: u8*(u8[] path, u8[] out) {
	if path.count >= out.count {
		return null;
	}

	for usz i..path.count {
		out[i] = path[i];
	}
	out[path.count] = 0;
	return out.data;
};

cstrlen :: usz(u8* str) {
	it := str;
	while *it {
		++it;
	}
	return usz:(it - str);
};


stou :: u8(u8[] str, u64* out) {
	it := str.data;
	end := it + str.count;

	if it == end {
		return 1;
	}

	v : i64 = 0;
	while it < end {
		c := *it++;

		if c > '9' || c < '0' {
			return 1;
		}

		v *= 10;
		v += c - '0';
	}

	*out = v;
	return 0;
};

stoi :: u8(u8[] str, i64* out) {
	it := str.data;
	end := it + str.count;

	if it == end {
		return 1;
	}

	sign : u8 = 0;
	if *it == '-' {
		sign = 1;
		if it++ == end {
			return 1;
		}
	}

	v : i64 = 0;
	while it < end {
		c := *it++;
		if c > '9' || c < '0' {
			return 1;
		}

		v *= 10;
		v += c - '0';
	}

	if sign {
		v = -v;
	}

	*out = v;
	return 0;
};

streq :: u8(u8[] s1, u8[] s2) {
	if s1.count != s2.count {
		return 0;
	}

	for usz i..s1.count {
		if s1[i] != s2[i] {
			return 0;
		}
	}
	return 1;
};


