
// Implementation of RFC 1035

DNSH :: enum u16 {
	QUERY		: 0b0000000000000000,
	RESPONSE	: 0b1000000000000000,
	QR_MASK		: 0b1000000000000000,

	STANDARD	: 0b0000000000000000,	// Standard query
	INVERSE		: 0b0000100000000000,	// Inverse query
	SRVSTATRQ	: 0b0001000000000000,	// Server status request
	QCODE_MASK	: 0b0111100000000000,

	AA			: 0b0000010000000000,	// Responding name server is an authority
	TC			: 0b0000001000000000,	// Message was truncated
	RD			: 0b0000000100000000,	// Recursion desired (copied into response)
	RA			: 0b0000000010000000,	// Recursion available

	NO_ERROR	: 0b0000000000000000,
	FORMAT_ERR	: 0b0000000000000001,	// Server was unable to interpret the query
	SRV_FAIL	: 0b0000000000000010,	// Server failure
	NAME_ERR	: 0b0000000000000011,	// Name does not exist (meaningful from authoritative only)
	NOT_IMPL	: 0b0000000000000100,	// Unsupported query type
	REFUSED		: 0b0000000000000101,	// Refused for policy reasons
	RCODE_MASK	: 0b0000000000001111,
};

DNST :: enum u16 {
	A		: 1,	// Host address
	NS		: 2,	// Authoritative name server
	MD		: 3,	// Mail destination (obsolete)
	MF		: 4,	// Mail forwarder (obsolete)
	CNAME	: 5,	// Canonical alias name
	SOA		: 6,	// Start of a zone of authority
	MB		: 7,	// Mailbox domain name
	MG		: 8,	// Mail group member
	MR		: 9,	// Mail rename domain name
	NULL	: 10,	// Null RR
	WKS		: 11,	// Well known service description
	PTR		: 12,	// Domain name pointer
	HINFO	: 13,	// Host information
	MINFO	: 14,	// Mailbox/mail list information
	MX		: 15,	// Mail exchange
	TXT		: 16,	// Text strings
};

DNSQT :: enum u16 {
	AXFR	: 252,	// Request transfer of an entire zone
	MAILB	: 253,	// Request mailbox-related (MB/MG/MR)
	MAILA	: 254,	// Request mail agent RRs
	ALL		: 255,	// Request all records
};

DNSC :: enum u16 {
	IN		: 1,	// Internet
	CS		: 2,	// CSNET (obsolete)
	CH		: 3,	// CHAOS
	HS		: 4,	// Hesiod
};

DNSQC_ALL: u16 : 255;	// All classes

DNS_Header :: struct {
	id		: u16;
	flags	: u16;
	qdcount	: u16;
	ancount	: u16;
	nscount	: u16;
	arcount	: u16;
};

DNS_Question :: struct {
	qtype	: u16;
	qclass	: u16;
};

DNS_RsrcRecord :: struct {
	type	: u16;
	class	: u16;
	ttl		: u32;
	rdlen	: u16;
};

import "std/net.nyx", "std/ipv4.nyx", "std/mem.nyx";

dns_encode_name :: isz(domain u8[], out u8[]) {
	q_it := out.data;
	q_max := q_it + out.count;
	substr := domain.data;
	for i: ..domain.count {
		if domain[i] == '.' {
			substr_len := i - usz:(substr - domain.data);
			q_it_next := q_it + substr_len + 1;
			if !substr_len || substr_len > 63 || q_it_next >= q_max {
				return -1;
			}
			*q_it++ = substr_len;
			for j: ..substr_len {
				*q_it++ = substr[j];
			}

			q_it = q_it_next;
			substr = domain.data + i + 1;
		}
	}

	substr_len := domain.count - usz:(substr - domain.data);
	q_it_next := q_it + substr_len + 2;
	if !substr_len || substr_len > 63u || q_it_next >= q_max {
		return -1;
	}
	*q_it++ = substr_len;
	for j: ..substr_len {
		*q_it++ = substr[j];
	}

	*q_it++ = 0;
	return usz:(q_it - out.data);
};

dnslookup_ipv4 :: u8(dns_host u8[], domain u8[], out sockaddr_in_t*) {
	saddr : sockaddr_in_t;
	mset8(&saddr, 0, sizeof(sockaddr_in_t));
	saddr.sin_family = AF.INET;
	saddr.sin_port = hton16(53);

	if ipv4_parse_addr(dns_host, &saddr) {
		return 1;
	}

	sock := socket(AF.INET, SOCK.STREAM, 0);
	if sock < 0 {
		return 1;
	}

	if sock->connect(void*:&saddr, sizeof(sockaddr_in_t)) < 0 {
		sock->close();
		return 1;
	}

	dh : DNS_Header;
	mset8(&dh, 0, sizeof(DNS_Header));
	dh.flags = hton16(DNSH.QUERY | DNSH.STANDARD | DNSH.RD);
	dh.qdcount = hton16(1);

	dq: DNS_Question;
	dq.qtype = hton16(DNST.A);
	dq.qclass = hton16(DNSC.IN);

	question : u8[256];
	qlen := dns_encode_name(domain, question);
	if qlen < 0 {
		sock->close();
		return 1;
	}

	msglen := hton16(sizeof(DNS_Header) + qlen + sizeof(DNS_Question));
	sock->write((&msglen)[0..1]);
	sock->write((&dh)[0..1]);
	sock->write(question[0..qlen]);
	sock->write((&dq)[0..1]);

	// Receive message length
	if sock->recv((&msglen)[0..1]) <= 0 {
		sock->close();
		return 1;
	}
	msglen = hton16(msglen);

	// Receive message body
	buf : u8[4096];
	if sock->recv(buf[0..msglen]) <= 0 || msglen < u32:sizeof(DNS_Header) {
		sock->close();
		return 1;
	}

	sock->close();

	rh := DNS_Header*:buf.data;
	rh.flags = hton16(rh.flags);
	rh.qdcount = hton16(rh.qdcount);
	rh.ancount = hton16(rh.ancount);
	rh.nscount = hton16(rh.nscount);
	rh.arcount = hton16(rh.arcount);

	rcode := rh.flags & DNSH.RCODE_MASK;
	if rcode != DNSH.NO_ERROR {
		return 1;
	}

	section_start := buf.data + sizeof(DNS_Header);
	it := section_start;

	// TODO: Prevent out-of-bounds writes

	for i: ..rh.qdcount {
		while *it { it++; } // QNAME
		it += sizeof(DNS_Question);
	}

	for i: ..rh.ancount {
		while *it { it++; } // NAME
		rr := DNS_RsrcRecord*:it;
		rr.type = hton16(rr.type);
		rr.class = hton16(rr.class);
		rr.ttl = hton16(rr.ttl);
		rr.rdlen = hton16(rr.rdlen);

		it += sizeof(DNS_RsrcRecord);

		if rr.type == DNST.A && rr.class == DNSC.IN {
			out.sin_addr = *u32*:it;
			return 0;
		}

		it += rr.rdlen; // RDATA
	}

	return 1;
};

