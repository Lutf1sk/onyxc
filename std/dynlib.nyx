// https://refspecs.linuxfoundation.org/elf/gabi4+/ch5.dynamic.html

import "std/unix.nyx", "std/elf.nyx", "std/mem.nyx", "std/str.nyx";

let elf_verify_magic :: u8(ELF64_FileHeader* fh) {
	for usz i..fh.magic.count {
		if fh.magic[i] != ELFMAGIC[i] {
			return 0;
		}
	}
	return 1;
}

def DynLibList :: struct {
	void* lib;
	void* next;
}

def DynLibrary :: struct {
	u8[] name;
	u8* img_base;
	u8* data;
	ELF64_FileHeader* fh;
	u8* strtab;
	u8* strtab_sym;
	ELF64_Sym[] syms;

	usz ref_count;
	void* deps;
}

let elf_getsh :: ELF64_SectHeader*(ELF64_FileHeader* fh, usz i) {
	return ELF64_SectHeader*:fh + fh.sh_offs + fh.sh_size * i;
}

let elf_getph :: ELF64_ProgHeader*(ELF64_FileHeader* fh, usz i) {
	return ELF64_ProgHeader*:fh + fh.ph_offs + fh.ph_size * i;
}

let elf_getstr :: u8[](u8* strtab, usz offs) {
	u8* str = strtab + offs;
	return str[0..cstrlen(str)];
}

let elf_img_size :: usz(ELF64_FileHeader* fh) {
	usz max = 0;
	for usz i..fh.sh_count {
		let sh = elf_getsh(fh, i);
		usz top = sh.addr + sh.size;
		if (sh.type == ELFSH_PROGBITS || sh.type == ELFSH_NOBITS) && top > max {
			max = top;
		}
	}
	return max;
}

let elf_map_sections :: void(ELF64_FileHeader* fh, u8* img_base) {
	for usz i..fh.sh_count {
		let sh = elf_getsh(fh, i);
		if sh.type == ELFSH_PROGBITS {
			mcopy(img_base + sh.addr, fh + sh.offs, sh.size);
		}
		if sh.type == ELFSH_NOBITS {
			mset8(img_base + sh.addr, 0, sh.size);
		}
	}
}

let elf_find_symdef :: ELF64_Sym*(DynLibrary* lib, u8[] name) {
	ELF64_Sym* weak = null;

	for usz i..lib.syms.count {
		ELF64_Sym* sym = &lib.syms[i];
		u8 binding = sym.info & ELFSYM_BIND_MASK;
		u8[] symname = elf_getstr(lib.strtab_sym, sym.name);
		if streq(name, symname) {
			if binding == ELFSYM_GLOBAL || binding == ELFSYM_LOCAL {
				return sym;
			}
			if (binding == ELFSYM_WEAK) {
				weak = sym;
			}
		}
	}

	DynLibList* lit = lib.deps;
	while lit {
		DynLibrary* lib = lit.lib;

		for usz i..lib.syms.count {
			ELF64_Sym* sym = &lib.syms[i];
			u8 binding = sym.info & ELFSYM_BIND_MASK;
			if binding == ELFSYM_GLOBAL {
				u8[] symname = elf_getstr(lib.strtab_sym, sym.name);
				if streq(name, symname) {
					return sym;
				}
			}
		}
		lit = lit.next;
	}

	return weak;
}

Pool* dlib_pool = null;
Pool* dlib_list_pool = null;

void* dlib_list_head = null;

let list_find_dlib :: DynLibrary*(void* head, u8[] name) {
	DynLibList* it = head;
	while it {
		if streq((DynLibrary*:it.lib).name, name) {
			return it.lib;
		}
		it = it.next;
	}
	return null;
}

let list_insert_dlib :: void(void** head, DynLibrary* lib) {
	DynLibList* new_entry = pmalloc(dlib_list_pool);
	new_entry.lib = lib;
	new_entry.next = *head;
	*head = new_entry;
}

DynLibrary*(u8[], Allocator*) dlopen_p = null;

let dlopen :: DynLibrary*(u8[] libname, Allocator* alc) {
	if !dlib_pool {
		dlib_pool = pmcreate(4096, sizeof(DynLibrary));
		dlib_list_pool = pmcreate(8192, sizeof(DynLibrary));
		if !dlib_pool || !dlib_list_pool {
			print("failed to map pool\n");
			return null;
		}
	}

	DynLibrary* lib = list_find_dlib(dlib_list_head, libname);
	if lib {
		return lib;
	}

	u8[] libpath_pfx :: "/usr/lib64/";
	usz libpath_len = libpath_pfx.count + libname.count;
	u8[] libpath = alc.alloc(alc.usr, libpath_len)[0..libpath_len];
	if !libpath.data {
		print("allocation failed\n");
		return null;
	}
	mcopy(libpath.data, libpath_pfx.data, libpath_pfx.count);
	mcopy(libpath.data + libpath_pfx.count, libname.data, libname.count);

	isz fd;
	if &fd->fopenr(libpath) {
		print("failed to open file\n");
		return null;
	}
	alc.free(alc.usr, libpath.data);

	stat_t st;
	fd->fstat(&st);

	u8* elf_data = alc.alloc(alc.usr, st.st_size);
	if !elf_data {
		print("allocation failed\n");
		return null;
	}
	fd->read(elf_data[0..st.st_size]);
	fd->close();

	let fh = ELF64_FileHeader*:elf_data;
	if !elf_verify_magic(fh) {
		print("ELF magic invalid\n");
		alc.free(alc.usr, elf_data);
		return null;
	}

	u8* strtab = elf_data + elf_getsh(fh, fh.strtab_index).offs;

	ELF64_Sym[] syms = null[0..0];

	for usz i..fh.sh_count {
		let sh = elf_getsh(fh, i);
		u8[] name = elf_getstr(strtab, sh.name);

		if sh.type == ELFSH_DYNSYM {
			syms = (ELF64_Sym*:elf_data + sh.offs)[0..sh.size/sizeof(ELF64_Sym)];
		}
	}

	u8[] interp = null[0..0];
	ELF64_Dyn* dyn_start = null;

	for usz i..fh.ph_count {
		let ph = elf_getph(fh, i);

		if ph.type == ELFPH_INTERP {
			interp = (elf_data + ph.offs)[0..ph.mem_size];
		}
		elif ph.type == ELFPH_DYNAMIC {
			dyn_start = ELF64_Dyn*:elf_data + ph.offs;
		}
	}

	if !dyn_start {
		print("no dynamic section found\n");
		alc.free(alc.usr, elf_data);
		return null;
	}

	u8* base = alc.alloc(alc.usr, elf_img_size(fh));
	if !base {
		print("allocation failed\n");
		alc.free(alc.usr, elf_data);
		return null;
	}
	elf_map_sections(fh, base);

	u8* strtab_sym = null;
	ELF64_RelAdd* rela_ptr = null;
	usz relasz = 0, relaent = 0;

	void() init = null;
	void*[] initarr = null[0..0];

	isz soname_offs = -1;

	ELF64_Dyn* dyn = dyn_start;
	while dyn && dyn.type != ELFDYN_NULL {
		switch dyn.type
		case ELFDYN_STRTAB			{ strtab_sym = elf_data + dyn.val; },
		case ELFDYN_RELA			{ rela_ptr = ELF64_RelAdd*:(elf_data + dyn.val); },
		case ELFDYN_RELASZ			{ relasz = dyn.val; },
		case ELFDYN_RELAENT			{ relaent = dyn.val; },
		case ELFDYN_INIT			{ init = void*:base + dyn.val; },
		case ELFDYN_INIT_ARRAY		{ initarr.data = void*:elf_data + dyn.val; },
		case ELFDYN_INIT_ARRAYSZ	{ initarr.count = dyn.val / sizeof(void*); },
		case ELFDYN_SONAME			{ soname_offs = dyn.val; },
		default {};
		dyn += sizeof(ELF64_Dyn);
	}

	u8[] soname = null[0..0];
	if soname_offs >= 0 {
		soname = elf_getstr(strtab_sym, soname_offs);
	}
	else {
		soname = malloc_init(alc, libname);
	}

	print("SONAME: ");
	print(soname);
	print("\n");

	lib = pmalloc(dlib_pool);
	lib.name = soname;
	lib.img_base = base;
	lib.data = elf_data;
	lib.fh = fh;
	lib.strtab = strtab;
	lib.strtab_sym = strtab_sym;
	lib.syms = syms;
	lib.ref_count = 1;
	lib.deps = null;

	dyn = dyn_start;
	while dyn && dyn.type != ELFDYN_NULL {
		if dyn.type == ELFDYN_NEEDED {
			DynLibrary* dep = dlopen_p(elf_getstr(strtab_sym, dyn.val), alc);
			if !dep {
				print("Failed to load dependency\n");
			}
			list_insert_dlib(&lib.deps, dep);
		}
		dyn += sizeof(ELF64_Dyn);
	}

	list_insert_dlib(&dlib_list_head, lib);

	ELF64_RelAdd* rela = rela_ptr;
	usz rela_count = relasz / relaent;

	for usz i..rela_count {
		u32 reltype = rela.info & ELFREL64_TYPE_MASK;
		u32 relsym = rela.info >> ELFREL64_SYM_SHIFT;

		void* patch_ptr = base + rela.offs;

		switch reltype
		case ELFREL_X64_NONE {
			// Do nothing
		},
		case ELFREL_X64_64 {
			u8[] symname = elf_getstr(strtab_sym, syms[relsym].name);
			ELF64_Sym* sym = elf_find_symdef(lib, symname);
			if (!sym) {
				print("undefined reference to ");
				print(symname);
				print("\n");
			}
			*u64*:patch_ptr = usz:base + sym.val + rela.addend;
		},
		case ELFREL_X64_RELATIVE {
			*u64*:patch_ptr = usz:base + rela.addend;
		},
		case ELFREL_X64_GLOB_DAT {
			u8[] symname = elf_getstr(strtab_sym, syms[relsym].name);
			ELF64_Sym* sym = elf_find_symdef(lib, symname);
			if (!sym) {
				print("undefined reference to ");
				print(symname);
				print("\n");
			}
			else {
				*u64*:patch_ptr = usz:base + sym.val;
			}
			print("Created GOT entry for '");
			print(symname);
			print("'\n");
		},
		case ELFREL_X64_IRELATIVE {
			*u64*:patch_ptr = (u64():base + u64():rela.addend)();
			print("Loaded 0x");
			print_h64(*u64*:patch_ptr);
			print("\n");
		},
		case ELFREL_X64_TPOFF64 {
			u8[] symname = elf_getstr(strtab_sym, syms[relsym].name);
			ELF64_Sym* sym = elf_find_symdef(lib, symname);
			if (!sym) {
				print("undefined reference to ");
				print(symname);
				print("\n");
			}
			print("Thread local variable '");
			print(symname);
			print("' offset 0x");
			print_h64(rela.addend);
			print("\n");

			*u64*:patch_ptr = usz:base + sym.val + rela.addend;
		},
		default {
			print("Unknown relocation type: ");
			print_i64(reltype);
			print("\n");
		};

		rela += relaent;
	}

// 	if init {
// 		init();
// 	}

// 	if initarr.data {
// 		for usz i..initarr.count {
// 			void() func = initarr[i] + void*:elf_data;
// 			func();
// 		}
// 	}

	return lib;
}

let dlsym :: void*(DynLibrary* lib, u8[] name) {
	for usz i..lib.syms.count {
		if streq(name, elf_getstr(lib.strtab_sym, lib.syms[i].name)) {
			return lib.img_base + lib.syms[i].val;
		}
	}
	return null;
}

