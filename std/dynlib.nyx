// https://refspecs.linuxfoundation.org/elf/gabi4+/ch5.dynamic.html

import "std/unix.nyx", "std/elf.nyx", "std/mem.nyx", "std/str.nyx";

elf_verify_magic :: u8(fh ELF64_FileHeader*) {
	for i: ..fh.magic.count {
		if fh.magic[i] != ELFMAGIC[i] {
			return 0;
		}
	}
	return 1;
};

DynLibList :: struct {
	lib		: void*;
	next	: void*;
};

DynLibrary :: struct {
	name		: u8[];
	img_base	: u8*;
	data		: u8*;
	fh			: ELF64_FileHeader*;
	strtab		: u8*;
	strtab_sym	: u8*;
	syms		: ELF64_Sym[];

	ref_count	: usz;
	deps		: void*;
};

elf_getsh :: ELF64_SectHeader*(fh ELF64_FileHeader*, i usz) {
	return ELF64_SectHeader*:fh + fh.sh_offs + fh.sh_size * i;
};

elf_getph :: ELF64_ProgHeader*(fh ELF64_FileHeader*, i usz) {
	return ELF64_ProgHeader*:fh + fh.ph_offs + fh.ph_size * i;
};

elf_getstr :: u8[](strtab u8*, offs usz) {
	str := strtab + offs;
	return str[0..cstrlen(str)];
};

elf_img_size :: usz(fh ELF64_FileHeader*) {
	max : usz = 0;
	for i: ..fh.sh_count {
		sh := elf_getsh(fh, i);
		top := sh.addr + sh.size;
		if (sh.type == ELFSH.PROGBITS || sh.type == ELFSH.NOBITS) && top > max {
			max = top;
		}
	}
	return max;
};

elf_map_sections :: void(fh ELF64_FileHeader*, img_base u8*) {
	for i: ..fh.sh_count {
		sh := elf_getsh(fh, i);
		if sh.type == ELFSH.PROGBITS {
			mcopy(img_base + sh.addr, fh + sh.offs, sh.size);
		}
		if sh.type == ELFSH.NOBITS {
			mset8(img_base + sh.addr, 0, sh.size);
		}
	}
};

elf_find_symdef :: ELF64_Sym*(lib DynLibrary*, name u8[]) {
	weak : ELF64_Sym* = null;

	for i: ..lib.syms.count {
		sym := &lib.syms[i];
		binding := sym.info & ELFSYM.BIND_MASK;
		symname := elf_getstr(lib.strtab_sym, sym.name);
		if streq(name, symname) {
			if binding == ELFSYM.GLOBAL || binding == ELFSYM.LOCAL {
				return sym;
			}
			if (binding == ELFSYM.WEAK) {
				weak = sym;
			}
		}
	}

	lit: DynLibList* = lib.deps;
	while lit {
		lib: DynLibrary* = lit.lib;

		for i: ..lib.syms.count {
			sym := &lib.syms[i];
			binding := sym.info & ELFSYM.BIND_MASK;
			if binding == ELFSYM.GLOBAL {
				symname := elf_getstr(lib.strtab_sym, sym.name);
				if streq(name, symname) {
					return sym;
				}
			}
		}
		lit = lit.next;
	}

	return weak;
};

dlib_pool		: Pool* = null;
dlib_list_pool	: Pool* = null;

dlib_list_head := null;

list_find_dlib :: DynLibrary*(head void*, name u8[]) {
	it : DynLibList* = head;
	while it {
		if streq((DynLibrary*:it.lib).name, name) {
			return it.lib;
		}
		it = it.next;
	}
	return null;
};

list_insert_dlib :: void(head void**, lib DynLibrary*) {
	new_entry : DynLibList* = pmalloc(dlib_list_pool);
	new_entry.lib = lib;
	new_entry.next = *head;
	*head = new_entry;
};

dlopen_p: DynLibrary*(libname u8[], alc Allocator*) = null;

dlopen :: DynLibrary*(libname u8[], alc Allocator*) {
	if !dlib_pool {
		dlib_pool = pmcreate(null, 4096, sizeof(DynLibrary), 0);
		dlib_list_pool = pmcreate(null, 8192, sizeof(DynLibrary), 0);
		if !dlib_pool || !dlib_list_pool {
			print("failed to map pool\n");
			return null;
		}
	}

	lib := list_find_dlib(dlib_list_head, libname);
	if lib {
		return lib;
	}

	libpath_pfx :: "/usr/lib64/";
	libpath_len := libpath_pfx.count + libname.count;
	libpath := alc.alloc(alc.usr, libpath_len)[0..libpath_len];
	if !libpath.data {
		print("allocation failed\n");
		return null;
	}
	mcopy(libpath.data, libpath_pfx.data, libpath_pfx.count);
	mcopy(libpath.data + libpath_pfx.count, libname.data, libname.count);

	fd : isz;
	if fopenr(&fd, libpath) {
		print("failed to open file\n");
		return null;
	}
	alc.free(alc.usr, libpath.data);

	st : stat_t;
	fd->fstat(&st);

	elf_data : u8* = alc.alloc(alc.usr, st.st_size);
	if !elf_data {
		print("allocation failed\n");
		return null;
	}
	fd->read(elf_data[0..st.st_size]);
	fd->close();

	fh := ELF64_FileHeader*:elf_data;
	if !elf_verify_magic(fh) {
		print("ELF magic invalid\n");
		alc.free(alc.usr, elf_data);
		return null;
	}

	strtab := elf_data + elf_getsh(fh, fh.strtab_index).offs;

	syms : ELF64_Sym[] = null[0..0];

	for i: ..fh.sh_count {
		sh := elf_getsh(fh, i);
		name := elf_getstr(strtab, sh.name);

		if sh.type == ELFSH.DYNSYM {
			syms = (ELF64_Sym*:elf_data + sh.offs)[0..sh.size/sizeof(ELF64_Sym)];
		}
	}

	interp		: u8[] = null[0..0];
	dyn_start	: ELF64_Dyn* = null;

	for i: ..fh.ph_count {
		ph := elf_getph(fh, i);

		if ph.type == ELFPH.INTERP {
			interp = elf_data[ph.offs..ph.mem_size];
		}
		elif ph.type == ELFPH.DYNAMIC {
			dyn_start = ELF64_Dyn*:elf_data + ph.offs;
		}
	}

	if !dyn_start {
		print("no dynamic section found\n");
		alc.free(alc.usr, elf_data);
		return null;
	}

	base : u8* = alc.alloc(alc.usr, elf_img_size(fh));
	if !base {
		print("allocation failed\n");
		alc.free(alc.usr, elf_data);
		return null;
	}
	elf_map_sections(fh, base);

	strtab_sym	: u8* = null;
	rela_ptr	: ELF64_RelAdd* = null;
	relasz		: usz = 0;
	relaent		: usz = 0;

	init	: void() = null;
	initarr	: void*[] = null[0..0];

	soname_offs: isz = -1;

	dyn := dyn_start;
	while dyn && dyn.type != ELFDYN.NULL {
		switch dyn.type
		case ELFDYN.STRTAB			{ strtab_sym = elf_data + dyn.val; },
		case ELFDYN.RELA			{ rela_ptr = ELF64_RelAdd*:(elf_data + dyn.val); },
		case ELFDYN.RELASZ			{ relasz = dyn.val; },
		case ELFDYN.RELAENT			{ relaent = dyn.val; },
		case ELFDYN.INIT			{ init = void*:base + dyn.val; },
		case ELFDYN.INIT_ARRAY		{ initarr.data = void*:elf_data + dyn.val; },
		case ELFDYN.INIT_ARRAYSZ	{ initarr.count = dyn.val / sizeof(void*); },
		case ELFDYN.SONAME			{ soname_offs = dyn.val; },
		default {}
		dyn += sizeof(ELF64_Dyn);
	}

	soname : u8[] = null[0..0];
	if soname_offs >= 0 {
		soname = elf_getstr(strtab_sym, soname_offs);
	}
	else {
		soname = malloc_init(alc, libname);
	}

	print("SONAME: ");
	print(soname);
	print("\n");

	lib = pmalloc(dlib_pool);
	lib.name = soname;
	lib.img_base = base;
	lib.data = elf_data;
	lib.fh = fh;
	lib.strtab = strtab;
	lib.strtab_sym = strtab_sym;
	lib.syms = syms;
	lib.ref_count = 1;
	lib.deps = null;

	dyn = dyn_start;
	while dyn && dyn.type != ELFDYN.NULL {
		if dyn.type == ELFDYN.NEEDED {
			dep := dlopen_p(elf_getstr(strtab_sym, dyn.val), alc);
			if !dep {
				print("Failed to load dependency\n");
			}
			list_insert_dlib(&lib.deps, dep);
		}
		dyn += sizeof(ELF64_Dyn);
	}

	list_insert_dlib(&dlib_list_head, lib);

	rela := rela_ptr;
	rela_count := relasz / relaent;

	for i: ..rela_count {
		reltype := rela.info & ELFREL.TYPE_MASK_64;
		relsym := rela.info >> ELFREL.SYM_SHIFT_64;

		patch_ptr := base + rela.offs;

		switch reltype
		case ELFREL.X64_NONE {
			// Do nothing
		},
		case ELFREL.X64_64 {
			symname := elf_getstr(strtab_sym, syms[relsym].name);
			sym := elf_find_symdef(lib, symname);
			if (!sym) {
				print("undefined reference to ");
				print(symname);
				print("\n");
			}
			*u64*:patch_ptr = usz:base + sym.val + rela.addend;
		},
		case ELFREL.X64_RELATIVE {
			*u64*:patch_ptr = usz:base + rela.addend;
		},
		case ELFREL.X64_GLOB_DAT {
			symname := elf_getstr(strtab_sym, syms[relsym].name);
			sym := elf_find_symdef(lib, symname);
			if (!sym) {
				print("undefined reference to ");
				print(symname);
				print("\n");
			}
			else {
				*u64*:patch_ptr = usz:base + sym.val;
			}
			print("Created GOT entry for '");
			print(symname);
			print("'\n");
		},
		case ELFREL.X64_IRELATIVE {
			*u64*:patch_ptr = (u64():base + u64():rela.addend)();
			print("Loaded 0x");
			print_h64(*u64*:patch_ptr);
			print("\n");
		},
		case ELFREL.X64_TPOFF64 {
			symname := elf_getstr(strtab_sym, syms[relsym].name);
			sym := elf_find_symdef(lib, symname);
			if (!sym) {
				print("undefined reference to ");
				print(symname);
				print("\n");
			}
			print("Thread local variable '");
			print(symname);
			print("' offset 0x");
			print_h64(rela.addend);
			print("\n");

			*u64*:patch_ptr = usz:base + sym.val + rela.addend;
		},
		default {
			print("Unknown relocation type: ");
			print_i64(reltype);
			print("\n");
		}

		rela += relaent;
	}

// 	if init {
// 		init();
// 	}

// 	if initarr.data {
// 		for usz i..initarr.count {
// 			void() func = initarr[i] + void*:elf_data;
// 			func();
// 		}
// 	}

	return lib;
};

dlsym :: void*(lib DynLibrary*, name u8[]) {
	for i: ..lib.syms.count {
		if streq(name, elf_getstr(lib.strtab_sym, lib.syms[i].name)) {
			return lib.img_base + lib.syms[i].val;
		}
	}
	return null;
};

