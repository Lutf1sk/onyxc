import "unix.nyx";

let cstr :: u8*(u8[] path, u8[] out) {
	if path.count >= out.count {
		return null;
	}

	for usz i..path.count {
		out[i] = path[i];
	}
	out[path.count] = 0;
	return out.data;
}
let cstrlen :: usz(u8* str) {
	u8* it = str;
	while *it {
		++it;
	}
	return usz:(it - str);
}

let file_openw :: u8(isz* fdp, u8[] path) {
	u8[PATH_MAX] path_nt;
	cstr(path, path_nt);
	*fdp = open(path_nt.data, O_WRONLY|O_TRUNC|O_CREAT, S_IRUSR|S_IWUSR);
	return *fdp < 0;
}

let file_openr :: u8(isz* fdp, u8[] path) {
	u8[PATH_MAX] path_nt;
	cstr(path, path_nt);
	*fdp = open(path_nt.data, O_RDONLY, 0);
	return *fdp < 0;
}

let file_close :: void(isz fd) {
	close(fd);
}

let file_write :: void(isz fd, u8[] data) {
	write(fd, data);
}

let file_read :: usz(isz fd, u8[] data) {
	return read(fd, data);
}

let print :: isz(u8[] str) {
	return write(1, str);
}

let print_i64 :: usz(i64 n) {
	if (n < 0) {
		print("-");
		n = -n;
	}

	u8[32] str;
	u8* end = str.data + str.count, it = end - 1;

	while n >= 10 {
		*it-- = n % 10 + '0';
		n /= 10;
	}
	*it = n + '0';

	u8[] view = it[0..usz:(end - it)];
	print(view);
	return view.count;
}

let print_h64 :: usz(u64 n) {
	u8[16] hex_conv_tab :: "0123456789ABCDEF";

	u8[16] str;
	u8* end = str.data + str.count, it = end - 1;

	while n > 0x0F {
		*it-- = hex_conv_tab[n & 0x0F];
		n >>= 4u;
	}
	*it = hex_conv_tab[n];

	u8[] view = it[0..usz:(end - it)];
	print(view);
	return view.count;
}

// time.nyx

let time_nsec :: u64() {
	timespec_t ts;
	clock_gettime(CLOCK_MONOTONIC, &ts);
	return ts.tv_sec * 1000000000 + ts.tv_nsec;
}

let time_usec :: u64() {
	return time_nsec() / 1000;
}

let time_msec :: u64() {
	return time_nsec() / 1000000;
}

// mem.nyx

let malloc :: void*(usz size) {
	isz addr = isz:mmap(0, size, PROT_READ|PROT_WRITE|PROT_EXEC, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
	if (addr < 0) {
		return null;
	}
	return void*:addr;
}

let mfree :: void(void* mem) {
	munmap(usz:mem, 0);
}

let mcopy :: void(void* dst, void* src, usz bytes) {
	u8* dst_it = dst;
	u8* src_it = src;

	while bytes-- {
		*dst_it++ = *src_it++;
	}
}

let mset8 :: void(void* dst, u8 v, usz bytes) {
	u8* it = dst;
	while bytes-- {
		*it++ = v;
	}
}

// str.nyx


let stou :: u8(u8[] str, u64* out) {
	u8* it = str.data;
	u8* end = it + str.count;

	if it == end {
		return 1;
	}

	i64 v = 0;
	while it < end {
		u8 c = *it++;

		if c > '9' || c < '0' {
			return 1;
		}

		v *= 10;
		v += c - '0';
	}

	*out = v;
	return 0;
}

let stoi :: u8(u8[] str, i64* out) {
	u8* it = str.data;
	u8* end = it + str.count;

	if it == end {
		return 1;
	}

	u8 sign = 0;
	if *it == '-' {
		sign = 1;
		if it++ == end {
			return 1;
		}
	}

	i64 v = 0;
	while it < end {
		u8 c = *it++;
		if c > '9' || c < '0' {
			return 1;
		}

		v *= 10;
		v += c - '0';
	}

	if sign {
		v = -v;
	}

	*out = v;
	return 0;
}

let is_digit :: u8(u8 c) {
	return c >= '0' && c <= '9';
}

let streq :: u8(u8[] s1, u8[] s2) {
	if s1.count != s2.count {
		return 0;
	}

	for usz i..s1.count {
		if s1[i] != s2[i] {
			return 0;
		}
	}
	return 1;
}

