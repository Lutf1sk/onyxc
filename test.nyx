
def usz :: u64,
	isz :: i64;

let print :: void(u8[] str) {
	syscall 1, 1, str.data, str.count;
}

let print_uq :: void(u64 n) {
	u8[32] arr;
	usz i = arr.count - usz: 1;
	while n {
		arr[i--] = u8:(n % u64: 10) + '0';
		n /= 10;
	}
	++i;

	u8[] str;
	str.data = &arr.data[i];
	str.count = arr.count - i;
	print(str);
}

let print_iq :: void(i64 n) {
	if n < 0 {
		print("-");
		n = -n;
	}
	print_uq(u64: n);
}

def test :: struct {
	i32 i;
	i32 j;
	i8 k;
}

let num :: test() {
	return test{1, 2, 3};
}

let main :: u64() {
	print_iq(num().i + num().j + num().k);
	print("\n");
	return usz: 0;
}

