import "lex.nyx";

ParseCtx :: struct {
	alc	: Allocator*;
	lcx	: LexCtx*;

	stack_alloc_count	: usz;
	stack				: Token*[];
};

PARSE_STACK_ALLOC_COUNT: usz : 512;

put_back :: u8(ParseCtx* cx, Token* tk) {
	if !cx.stack_alloc_count {
		cx.stack.data = cx.alc.alloc(cx.alc.usr, PARSE_STACK_ALLOC_COUNT * sizeof(Token*));
		if !cx.stack.data { return 1; }
	}
	elif cx.stack.count > cx.stack_alloc_count {
		cx.stack.data = cx.alc.alloc(cx.alc.usr, (cx.stack_alloc_count >>= 2) * sizeof(Token*));
		if !cx.stack.data { return 1; }
	}

	cx.stack[cx.stack.count++] = tk;
};

eof_token: Token = {
	TK.EOF, 0, 0, 0,
	"end-of-file"
};

consume :: Token*(ParseCtx* cx) {
	tk : Token* = null;

	if cx.stack.count {
		tk = cx.stack[--cx.stack.count];
	}
	else {
		if !cx.lcx || cx.lcx.it >= cx.lcx.out.count { return &eof_token; }
		tk = &cx.lcx.out[cx.lcx.it++];
	}
	// TODO
	return tk;
};

peek :: Token*(ParseCtx* cx, usz n) {
	while cx.stack.count <= n {
		tk := consume(cx);
		if tk.type == TK.EOF || put_back(cx, tk) { return &eof_token; }
	}

	return cx.stack[cx.stack.count - n - 1];
};

EXPR :: enum usz {
	INTEGER, FLOAT, STRING, SYM,
	LAMBDA, ARRAY, STRUCT,

	ADD, SUBTRACT, MULTIPLY, DIVIDE, MODULO, NEGATE,

	DEREFERENCE, REFERENCE,

	PFX_INCREMENT, PFX_DECREMENT, SFX_INCREMENT, SFX_DECREMENT,

	BIT_AND, BIT_OR, BIT_XOR, BIT_NOT, BIT_SHIFT_LEFT, BIT_SHIFT_RIGHT,

	LOGIC_AND, LOGIC_OR, LOGIC_NOT,
	EQUAL, NOT_EQUAL,
	LESSER, GREATER,
	LESSER_OR_EQUAL, GREATER_OR_EQUAL,

	ASSIGN,
	ADD_ASSIGN, SUBTRACT_ASSIGN, MULTIPLY_ASSIGN, DIVIDE_ASSIGN, MODULO_ASSIGN,
	BIT_SHIFT_LEFT_ASSIGN, BIT_SHIFT_RIGHT_ASSIGN, BIT_AND_ASSIGN, BIT_XOR_ASSIGN, BIT_OR_ASSIGN,

	MEMBER,
	SUBSCRIPT,
	CALL,
	CONVERT,
	VIEW, DATA, COUNT,

	SYSCALL,
};

Expr :: struct {
	type	: EXPR;
	child	: void*;
	next	: void*;
};

new_expr :: Expr*(Allocator* alc, EXPR type) {
	expr : Expr* = alc.alloc(alc.usr, sizeof(Expr));
	expr.type = type;
	return expr;
};

parse_expr :: Expr*(ParseCtx* cx) {
	return null;
};

STMT :: enum usz {
	IF,
	DO, WHILE, FOR,
	BREAK, CONTINUE,
	LET, DEF,
	RETURN,
	COMPOUND,
	EXPR,
	GOTO, LABEL,
	SWITCH, CASE, DEFAULT,
};

Stmt :: struct {
	type	: STMT;
	child	: void*;
	next	: void*;
};

new_stmt :: Stmt*(Allocator* alc, STMT type) {
	stmt : Stmt* = alc.alloc(alc.usr, sizeof(Stmt));
	stmt.type = type;
	return stmt;
};

parse_compound :: Stmt*(ParseCtx* cx) {
	tk : Token* = null;

	if (tk = consume(cx)).type != TK.LBRACE {
		print("expected '{', got '");
		print(tk.str);
		print("'\n");
		return null;
	}

	stmt := new_stmt(cx.alc, STMT.COMPOUND);
	curr := &stmt.next;
	while peek(cx, 0).type != TK.RBRACE {
// 		*curr = parse_stmt(cx);
		*curr = new_stmt(cx.alc, 0);
		curr = &(Stmt*:curr).next;
	}

	if (tk = consume(cx)).type != TK.RBRACE {
		print("expected '}', got '");
		print(tk.str);
		print("'\n");
		return null;
	}

	return stmt;
};

parse_stmt :: Stmt*(ParseCtx* cx) {
	switch peek(cx, 0).type
	case TK.KW_IMPORT {
		consume(cx);
		return null;
	},
	case TK.KW_LET {
		consume(cx);
		stmt := new_stmt(cx.alc, STMT.LET);
		return stmt;
	},
	case TK.KW_DEF {
		consume(cx);
		stmt := new_stmt(cx.alc, STMT.DEF);
		return stmt;
	},
	case TK.KW_IF {
		consume(cx);
		stmt := new_stmt(cx.alc, STMT.IF);
		stmt.child = parse_compound(cx);
		return stmt;
	},
	default {
		print("unexpected token '");
		print(consume(cx).str);
		print("'\n");
	};

	return null;
};

